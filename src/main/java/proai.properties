#
#                        Proai Configuration 
#                 ================================

##############################
# Front-End OAI-PMH Behavior #
##############################

# For multi-part OAI responses, this specifies the maximum time to wait 
# between requests before cleaning up the session.
#
proai.secondsBetweenRequests = 600

# The maximum number of records to include in each part of a 
# ListRecords response.
#
proai.incompleteRecordListSize = 100

# The maximum number of record headers to include in each part of a 
# ListIdentifiers response.
#
proai.incompleteIdentifierListSize = 500

# The maximum number of sets to include in each part of a 
# ListSets response.
#
proai.incompleteSetListSize = 500


############################
# Back-End Update Behavior #
############################

# How often Proai should poll the driver for updates.
#
proai.driverPollSeconds = 120

# Set this to false to start the service without polling enabled.
# Note: You can also change polling behavior while the service is running
# by executing the following SQL against the database:
#
# <pre>
#     UPDATE rcAdmin SET pollingEnabled = 0 (or 1 to enable it)
# </pre>
#
# The value configured via this property will always be put into effect 
# when the service is started.
#
proai.driverPollingEnabled = true

# The maximum number of worker threads to use while retrieving new/updated
# OAI records from the driver.
#
proai.maxWorkers = 5

# How many requests each worker thread should make before returning the
# batch to the database to be committed.
#
proai.maxWorkBatchSize = 10

# If a request of the driver for a specific record fails for any reason,
# this is the maximum number of times that record should be automatically
# retried before giving up on that record.  If this is exceeded, the
# record information will remain in the rcFailure table until it is dealt
# with manually.
#
proai.maxFailedRetries = 3

# The maximum size the in-memory record commit queue is allowed to reach.
# If this threshold is reached, it means that worker threads are returning
# results faster than they can be committed to the database by the commit 
# thread.  If this occurs, workers will have to wait until more items have
# been committed before they can add any more to the queue.
#
proai.maxCommitQueueSize = 120

# The maximum number of record updates (from the in-memory commit queue) 
# that should be committed to the database at one time.
#
proai.maxRecordsPerTransaction = 60

# Whether to run schema validation during the update process.
# This defaults to true.
#
proai.validateUpdates = false

##########################
# File Storage Locations #
##########################

# The directory where cache files should be stored. This will be created 
# if it doesn't exist.
#
proai.cacheBaseDir            = target/oai-server/cache

# Where OAI-PMH session data will be stored when needed.
# This directory will be created at startup if it doesn't already exist.
#
# Each session consists of a series of small data files in a uniquely-named 
# subdirectory beneath this one.  They are automatically created and 
# removed as needed.
#
proai.sessionBaseDir = target/oai-server/sessions

# Where to store schema files if validation is enabled.
#
proai.schemaDir = target/oai-server/schemas

##################################
# Primary Database Configuration #
##################################

# The JDBC connection URL for the database that will be used by the cache.
#
# <p>Embedded McKoi example:<br/>
#    <code>jdbc:mckoi:local://build/test/mckoi/mckoi.conf?create_or_boot=true</code>
# </p>
# <p>Local McKoi example:<br/>
#    <code>jdbc:mckoi://localhost/</code>
# </p>
# <p>Local MySQL example:<br/>
#    <code>jdbc:mysql://localhost/proai?useUnicode=true&characterEncoding=UTF-8&autoReconnect=true</code>
# </p>
# <p>Local Oracle example:<br/>
#    <code>jdbc:oracle:thin:@localhost:1521:proai</code>
# </p>
# <p>Local Postgres example:<br/>
#    <code>jdbc:postgresql://localhost/proai</code>
# </p>
#
proai.db.url = jdbc:postgresql://localhost/oaiserver


# The class name of the JDBC driver appropriate for use 
# with the connection url.  The appropriate library must be 
# in the classpath.
#
# <p>Mckoi example:<br/>
#   <code>proai.db.driverClassName = com.mckoi.JDBCDriver</code>
# </p>
# <p>MySQL example:<br/>
#   <code>proai.db.driverClassName = com.mysql.jdbc.Driver</code>
# </p>
# <p>Oracle example:<br/>
#   <code>proai.db.driverClassName = oracle.jdbc.driver.OracleDriver</code>
# </p>
# <p>Postgres example:<br/>
#   <code>proai.db.driverClassName = org.postgresql.Driver</code>
# </p>
#
proai.db.driverClassName = org.postgresql.Driver

# If using MySQL, this indicates whether to stream query results 
# one-at-a-time from the database to conserve memory.  If unspecified, 
# this defaults to false.
#
# <p>
# Background: For large repositories, MySQL's default behavior of reading
# all results into memory can cause <code>OutOfMemory</code> errors in 
# Proai.  If this value is set to true, memory requirements for Proai 
# will be lower, but query performance will suffer.  For more detail,
# please see the 
# <a href="http://dev.mysql.com/doc/connector/j/en/cj-implementation-notes.html">Connector-J 
# Implementation Notes</a>.
# </p>
#
proai.db.mySQLResultTrickling = false

# The database user.  This user should already exist in the database
# and must have permission to create, modify, and query tables.
#
proai.db.username        = proai

# The password for the database user.
#
proai.db.password        = proai


###################################
# Advanced Database Configuration #
###################################

# The maxiumum number of connections from the pool that may be active
# (leased) at once.  If unspecified, this defaults to 8.
#
proai.db.maxActive = 16

# The maximum number of milliseconds to wait for a connection from the
# pool if none are available.  If unspecified, this defaults to -1,
# which means "indefinite".
#
proai.db.maxWait = 5000

# proai.db.*
#
# Any other properties defined by the Apache commons-DBCP project
# can be specified.  See the full list (and documentation) at
# http://jakarta.apache.org/commons/dbcp/configuration.html
# 
# To use standard DBCP properties, just prefix them with "proai.db."
# here.  

# proai.db.connection.*
# 
# To use JDBC driver-specific properties (in DBCP, these 
# are called "connectionProperties"), prefix them with The Java class responsible for creating the database tables required
# by Proai's record cache.
#
# <p>The name of the property should be the driverClassName of the JDBC 
# driver you're using, plus ".ddlConverter".</p>
#
com.mckoi.JDBCDriver.ddlConverter            = proai.util.McKoiDDLConverter
com.mysql.jdbc.Driver.ddlConverter           = proai.util.MySQLDDLConverter
oracle.jdbc.driver.OracleDriver.ddlConverter = proai.util.OracleDDLConverter
org.postgresql.Driver.ddlConverter           = proai.util.PostgresDDLConverter

# Whether the database interprets backslashes in SQL strings as
# escape characters.  This is needed to that Proai can formulate
# proper queries against the database.
#
# <p>The name of the property should be the driverClassName of the JDBC
# driver you're using plus ".backslashIsEscape".  If unspecified, 
# backslashIsEscape will be assumed true.</p>
#
com.mckoi.JDBCDriver.backslashIsEscape            = true
com.mysql.jdbc.Driver.backslashIsEscape           = true
oracle.jdbc.driver.OracleDriver.backslashIsEscape = false
org.postgresql.Driver.backslashIsEscape           = true


####################################
# OAIDriver-Specific Configuration #
####################################

# The class name of the proai.driver.OAIDriver implementation to use.
# The appropriate library must be in the classpath.
#
proai.driverClassName = au.com.redboxresearchdata.oai.proai.OaiDriver
# Driver specific
proai.OaiDriver.db.url = jdbc:postgresql://localhost/oaiserver
proai.OaiDriver.db.driver = org.postgresql.Driver
proai.OaiDriver.db.user = proai
proai.OaiDriver.db.pw = proai
#Init 
proai.OaiDriver.db.sql.init = CREATE OR REPLACE FUNCTION update_lastmodified_column() \
        RETURNS TRIGGER AS ' \
  BEGIN \
    NEW.lastmodified = NOW(); \
    RETURN NEW; \
  END; \
' LANGUAGE 'plpgsql'; 
# Metadata
proai.OaiDriver.db.ddl.metadataformat = CREATE TABLE provider_metadataformat (id SERIAL PRIMARY KEY, metadataPrefix varchar(1024), schemaTxt varchar(1024), metadataNamespace varchar(1024), lastmodified TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP);\  
CREATE TRIGGER provider_metadata_update_lastmodified BEFORE UPDATE ON provider_metadata FOR EACH ROW EXECUTE PROCEDURE update_lastmodified_column(); CREATE UNIQUE INDEX mdPrefixIdx ON provider_metadataformat (metadataPrefix);
proai.OaiDriver.db.ddl.metadataformat.check = SELECT EXISTS( SELECT * FROM information_schema.tables WHERE table_catalog = 'oaiserver' AND table_name = 'provider_metadataformat') AS existsFlag;
proai.OaiDriver.db.sql.metadataformat.init = INSERT INTO provider_metadataformat (metadataPrefix, schemaTxt, metadataNamespace) VALUES ('eac-cpf', 'urn:isbn:1-931666-33-4 http://eac.staatsbibliothek-berlin.de/schema/cpf.xsd', 'urn:isbn:1-931666-33-4');
proai.OaiDriver.db.sql.metadataformat.select = SELECT * FROM provider_metadataformat;
# Identity
proai.OaiDriver.db.ddl.identity= CREATE TABLE provider_identity (id SERIAL PRIMARY KEY, xmlEntry text, lastmodified TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP); \
CREATE TRIGGER provider_identity_update_lastmodified BEFORE UPDATE ON provider_identity FOR EACH ROW EXECUTE PROCEDURE update_lastmodified_column(); 
proai.OaiDriver.db.ddl.identity.check = SELECT EXISTS( SELECT * FROM information_schema.tables WHERE table_catalog = 'oaiserver' AND table_name = 'provider_identity') AS existsFlag;
proai.OaiDriver.db.sql.identity.init = INSERT INTO provider_identity (xmlEntry) VALUES ('<Identify>    <repositoryName>The Fascinator</repositoryName>    <baseURL>http://demo.redboxresearchdata.com.au/mint/default</baseURL>    <protocolVersion>2.0</protocolVersion>    <adminEmail>fascinator@usq.edu.au</adminEmail>      <earliestDatestamp>0001-01-01T00:00:00Z</earliestDatestamp>    <deletedRecord>persistent</deletedRecord>    <granularity>YYYY-MM-DDThh:mm:ssZ</granularity>    <description>        <oai-identifier xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/oai-identifier http://www.openarchives.org/OAI/2.0/oai-identifier.xsd" xmlns="http://www.openarchives.org/OAI/2.0/oai-identifier">            <scheme>oai</scheme>            <repositoryIdentifier>fascinator.usq.edu.au</repositoryIdentifier>            <delimiter>:</delimiter>            <sampleIdentifier>oai:fascinator.usq.edu.au:5e8ff9bf55ba3508199d22e984129be6</sampleIdentifier>        </oai-identifier>    </description></Identify>');
proai.OaiDriver.db.sql.identity.select = SELECT * FROM provider_identity;
# Sets
proai.OaiDriver.db.ddl.sets= CREATE TABLE provider_sets (id SERIAL PRIMARY KEY, spec varchar(1024), xmlEntry text, lastmodified TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP); \
CREATE TRIGGER provider_sets_update_lastmodified BEFORE UPDATE ON provider_sets FOR EACH ROW EXECUTE PROCEDURE update_lastmodified_column();  CREATE UNIQUE INDEX specIdx ON provider_sets (spec);
proai.OaiDriver.db.ddl.sets.check = SELECT EXISTS( SELECT * FROM information_schema.tables WHERE table_catalog = 'oaiserver' AND table_name = 'provider_sets') AS existsFlag;
proai.OaiDriver.db.sql.sets.init = INSERT INTO provider_sets (spec, xmlEntry) VALUES ('Parties_People', '<set><setSpec>Parties_People</setSpec><setName>Parties - People</setName></set>');
proai.OaiDriver.db.sql.sets.select = SELECT * FROM provider_sets;
# Records
proai.OaiDriver.db.ddl.records= CREATE TABLE provider_records (id SERIAL PRIMARY KEY, metadataPrefix varchar(1024), source text, recordId varchar(1024), xmlEntry text, lastmodified TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP); \
CREATE TRIGGER provider_records_update_lastmodified BEFORE UPDATE ON provider_records FOR EACH ROW EXECUTE PROCEDURE update_lastmodified_column(); CREATE UNIQUE INDEX recordIdIdx ON provider_records (recordId);
proai.OaiDriver.db.ddl.records.check = SELECT EXISTS( SELECT * FROM information_schema.tables WHERE table_catalog = 'oaiserver' AND table_name = 'provider_records') AS existsFlag;
proai.OaiDriver.db.sql.records.init = INSERT INTO provider_records (metadataPrefix, source, recordId, xmlEntry) VALUES ('eac-cpf', 'init-seed', 'd082b0890570265c99b52f360a674112', ' <record> \
            <header> \
                <identifier>http://demo.redboxresearchdata.com.au/mint/published/detail/d082b0890570265c99b52f360a674112</identifier> \
                <datestamp>2014-02-26T01:37:32Z</datestamp> \
                <setSpec>Parties_People</setSpec> \
            </header> \
                            <metadata> \
<eac-cpf xmlns="urn:isbn:1-931666-33-4" \
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" \
	xmlns:xlink="http://www.w3.org/1999/xlink" \
	xsi:schemaLocation="urn:isbn:1-931666-33-4 http://eac.staatsbibliothek-berlin.de/schema/cpf.xsd"> \
    <control> \
        <recordId>d082b0890570265c99b52f360a674112</recordId> \
        <maintenanceStatus>new</maintenanceStatus> \
        <maintenanceAgency> \
                        <agencyCode>TO-DO</agencyCode> \
                        <agencyName>The University of Examples, Australia</agencyName> \
        </maintenanceAgency> \
        <languageDeclaration> \
            <language languageCode="eng">English</language> \
            <script scriptCode="Latn">Latin</script> \
        </languageDeclaration> \
                <maintenanceHistory> \
            <maintenanceEvent> \
                <eventType>created</eventType> \
                <eventDateTime standardDateTime="" /> \
                <agentType>machine</agentType> \
                <agent>Mint Name Authority - The University of Examples, Australia</agent> \
            </maintenanceEvent> \
        </maintenanceHistory> \
    </control> \
    <cpfDescription> \
        <identity> \
            <entityId>http://demo.redboxresearchdata.com.au/mint/published/detail/d082b0890570265c99b52f360a674112</entityId> \
            <entityType>person</entityType> \
            <nameEntry> \
                                                <part localType="surname">Zweinstein</part> \
                <part localType="forename">Alberto</part> \
                            </nameEntry> \
        </identity> \
        <description> \
            <biogHist> \
                                                    <abstract>Dr Alberto Zweinstein is a Lecturer at the University of Examples</abstract> \
                            </biogHist> \
        </description> \
    </cpfDescription> \
</eac-cpf> \
                                </metadata> \
                    </record> \r\n \');
proai.OaiDriver.db.sql.records.select = SELECT * FROM provider_records

#Change 
proai.OaiDriver.db.sql.change.select = SELECT TO_CHAR(GREATEST(max(a.lastmodified),max(b.lastmodified),max(c.lastmodified),max(d.lastmodified)),'YYYY-MM-DD HH24:MI:SS.MSTZ') AS latestModDate FROM provider_identity a, provider_metadataformat b, provider_records c, provider_sets d;
proai.OaiDriver.df.change = yyyy-MM-dd HH:mm:ss.SSSZZZ